{"version":3,"sources":["src/actions/connection_success.js","src/actions/create_multiplayer_request.js","src/actions/create_multiplayer_success.js","src/actions/create_singleplayer_request.js","src/actions/create_singleplayer_success.js","src/actions/game_loss.js","src/actions/game_start.js","src/actions/game_state_update.js","src/actions/game_stop.js","src/actions/game_victory.js","src/actions/index.js","src/actions/join_game_request.js","src/actions/move_paddle_start.js","src/actions/move_paddle_stop.js","src/bodies/ball.js","src/bodies/brick.js","src/bodies/index.js","src/bodies/paddle.js","src/bodies/score.js","src/constants.js","src/gameloop.js","src/generate_levels.js","src/get_nation_data.js","src/initialize.js","src/music.js","src/player.js","src/qr_code.js","src/sketch.js","src/socket/client.js","src/stats.js","src/utils.js","src/views/connection_loss.js","src/views/create_multiplayer_screen.js","src/views/created_game.js","src/views/game_loss.js","src/views/game_started.js","src/views/game_stopped.js","src/views/game_victory.js","src/views/index.js","src/views/init_game.js","src/views/mode_screen.js","src/views/multiplayer_screen.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArtdA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA7CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;ACAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjvGA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3EA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA9DA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAlDA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA","file":"../breakout-backend/web/app.js","sourcesContent":["/**\n * @module actions/connection_success.js\n */\n\nexports.ConnectionSuccessAction = class ConnectionSuccessAction {\n  constructor ({ clientId }) {\n    this.clientId = clientId\n  }\n\n  handler () {\n    window.wsClient.setClientId(this.clientId)\n  }\n}\n","/**\n * @module actions/create_game_request.js\n */\n\nexports.CreateMultiplayerRequestAction = class CreateMultiplayerRequestAction {}\n","/**\n * @module actions/create_game_success.js\n */\n\nconst { viewManager } = require('../views/index')\n\nexports.CreateMultiplayerSuccessAction = class CreateMultiplayerSuccessAction {\n  constructor ({ key }) {\n    this.key = key\n  }\n\n  handler () {\n    //viewManager.go('')\n  }\n}\n","/**\n * @module actions/create_game_request.js\n */\n\nexports.CreateSingleplayerRequestAction = class CreateSingleplayerRequestAction {}\n","/**\n * @module actions/create_game_success.js\n */\n\nconst createdGameView = require('../views/created_game')\n\nexports.CreateSingleplayerSuccessAction = class CreateSingleplayerSuccessAction {\n  constructor ({ key }) {\n    this.key = key\n  }\n\n  handler () {\n\n  }\n}\n","/**\n * @module actions/game_loss.js\n */\n\nconst gameLossView = require('../views/game_loss')\n\nexports.GameLossAction = class GameLossAction {\n  handler () {\n    gameLossView.show()\n  }\n}\n","/**\n * @module actions/game_start.js\n */\n\nconst gameStartedView = require('../views/game_started')\n\nexports.GameStartAction = class GameStartAction {\n  handler () {\n    gameStartedView.show()\n  }\n}\n","/**\n * @module actions/game_state_update.js\n */\n\nconst { gameLoop } = require('../gameloop')\n\nexports.GameStateUpdateAction = class GameStateUpdateAction {\n  constructor ({ bodies, players }) {\n    this.bodies = bodies\n    this.players = players\n  }\n\n  handler () {\n    gameLoop.updatePlayers(this.players)\n    gameLoop.updateBodies(this.bodies)\n  }\n}\n","/**\n * @module actions/game_stop.js\n */\n\nconst gameStoppedView = require('../views/game_stopped')\n\nexports.GameStopAction = class GameStopAction {\n  handler () {\n    gameStoppedView.show()\n  }\n}\n","/**\n * @module actions/game_victory.js\n */\n\nconst gameVictoryView = require('../views/game_victory')\n\nexports.GameVictoryAction = class GameVictoryAction {\n  handler () {\n    gameVictoryView.show()\n  }\n}\n","const { ConnectionSuccessAction } = require('./connection_success')\nconst { CreateSingleplayerSuccessAction } = require('./create_singleplayer_success')\nconst { CreateMultiplayerSuccessAction } = require('./create_multiplayer_success')\nconst { GameStartAction } = require('./game_start')\nconst { GameStopAction } = require('./game_stop')\nconst { GameVictoryAction } = require('./game_victory')\nconst { GameLossAction } = require('./game_loss')\nconst { GameStateUpdateAction } = require('./game_state_update')\n\nexports.requestActionsMap = {\n  ConnectionSuccessAction,\n  CreateSingleplayerSuccessAction,\n  CreateMultiplayerSuccessAction,\n  GameStartAction,\n  GameStopAction,\n  GameVictoryAction,\n  GameLossAction,\n  GameStateUpdateAction\n}\n","/**\n * @module actions/join_game_request.js\n */\n\nexports.JoinGameRequestAction = class JoinGameRequestAction {\n  /**\n   * @param {string} key \n   */\n  constructor (key) {\n    this.key = key\n  }\n}\n","/**\n * @module actions/move_paddle_start.js\n */\n\nexports.MovePaddleStartAction = class MovePaddleStartAction {\n  constructor (direction) {\n    this.direction = direction\n  }\n}\n","/**\n * @module actions/move_paddle_stop.js\n */\n\nexports.MovePaddleStopAction = class MovePaddleStopAction {}\n","/**\n * @module bodies/ball\n */\n\n/**\n * Represents the ball\n * @class\n * @prop {number} x - horizontal position\n * @prop {number} y - vertical position\n * @prop {number} dx - horizontal speed\n * @prop {number} dy - vertical speed\n */\nexports.Ball = class Ball {\n  constructor () {\n    this.height = 0\n    this.width = 0\n\n    this.x = 0\n    this.y = 0\n\n    this.color = 'white'\n  }\n\n  /**\n   * Update body to match the server state\n   * @param {object} bodyObj \n   */\n  update ({ height, width, x, y }) {\n    this.height = height\n    this.width = width\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Draw the ball on the provides 2D context\n   * @method\n   * @param {Sketch} s\n   */\n  draw (s) {\n    s.fill(this.color)\n    s.rect(this.x, this.y, this.height, this.width, this.width)\n  }\n}\n","/**\n * @module bodies/brick\n */\n\nconst constants = require('../constants')\nconst utils = require('../utils')\n\n/**\n * Represents a brick\n * @class\n * @prop {number} x - horizontal position\n * @prop {number} height\n * @prop {number} width\n * @prop {number[]} color\n */\nexports.Brick = class Brick {\n  constructor(x, height, width) {\n    this.x = x\n    this.y = 0\n    this.height = height\n    this.width = width\n    this.color = utils.randomColor()\n  }\n\n  /**\n   * Move the ball to new position\n   * @method\n   * @param {int} dx\n   * @param {int} dy\n   */\n  move(dx, dy) {\n    this.x += dx\n    this.y += dy\n  }\n\n  /**\n   * Draw the brick on the screen\n   * @method\n   */\n  draw() {\n    fill.apply(fill, this.color)\n    rect(this.x, this.y, this.width, this.height)\n  }\n}\n\n/**\n * Represents a row of bricks\n * @class\n * @param {number} rowIndex - The index of row\n * @prop {Brick[]} bricks\n */\nexports.BrickRow = class BrickRow {\n  constructor(rowIndex){\n    const count = 8\n    const margin = 10\n    const height = 30\n    const width = (constants.C_WIDTH - count * margin) / count\n\n    // Create new row\n    this.bricks = new Array(count)\n      .fill(null)\n      .map((_, i) => new Brick((width + margin) * i, height, width))\n  }\n\n  /**\n   * Move the bricks in this row down 1 row\n   * @method\n   */\n  moveDown() {\n    for (const brick of this.bricks) {\n      brick.move(0, height + margin)\n    }\n  }\n\n  /**\n   * Checks if the ball colides with a brick in the row\n   * @method\n   * @param {Ball} ball\n   * @return {Ball}\n   */\n  isBallCollision(ball) {\n    for (const brick of this.bricks) {\n      if (utils.isBallCollision(ball, brick)) {\n        return brick\n      }\n    }\n    return null\n  }\n\n  /**\n   * Removes brick from the row\n   * @method\n   * @param {Brick} brick\n   */\n  removeBrick(brick) {\n    this.bricks = this.bricks.filter((b) => b !== brick)\n  }\n\n  /**\n   * Checks if the row is empty\n   * @method\n   * @return {bool}\n   */\n  isEmpty() {\n    return this.bricks.length < 1\n  }\n\n  /**\n   * Draws the bricks\n   * @method\n   */\n  draw() {\n    for (const brick of this.bricks) {\n      brick.draw()\n    }\n  }\n}\n","const { Ball } = require('./ball')\nconst { Paddle } = require('./paddle')\nconst { Brick } = require('./brick')\n\nexports.bodiesMap = {\n  Ball,\n  Paddle,\n  Brick\n}\n","/**\n * @module bodies/paddle\n */\n\n/**\n * Represents paddle\n * @class\n * @prop {number} height\n * @prop {number} width\n * @prop {number} borderRadius\n * @prop {number} x\n * @prop {number} y\n * @prop {string} color\n */\nexports.Paddle = class Paddle {\n  constructor () {\n    this.height = 0\n    this.width = 0\n    this.borderRadius = 4\n\n    this.x = 0\n    this.y = 0\n\n    this.color = 'white'\n  }\n\n  /**\n   * Update body to match the server state\n   * @param {object} bodyObj \n   */\n  update ({ height, width, x, y }) {\n    this.height = height\n    this.width = width\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Daw the paddle on the screen\n   * @method\n   * @param {Sketch} s\n   */\n  draw (s) {\n    s.fill(this.color)\n    s.rect(this.x, this.y, this.width, this.height, this.borderRadius)\n  }\n}\n","/**\n * @module bodies/score\n */\n\nconst constants = require('../constants')\n\n/**\n * Represents the user score\n * @class\n * @prop {number} score\n * @prop {string} color\n */\nexports.Score = class Score {\n  constructor (currentPlayer = false) {\n    const gap = constants.C_HEIGHT * 0.20\n    this.y = currentPlayer ? constants.C_HEIGHT - gap : gap\n    this.points = 0\n    this.color = 'white'\n  }\n\n  /**\n   * @method\n   */\n  update ({ points }) {\n    this.points = points\n  }\n\n  /**\n   * Draws the score on the screen\n   * @method\n   */\n  draw (s) {\n    s.fill(this.color)\n    s.textFont('Arial', 20)\n    s.textAlign(s.CENTER)\n    s.text(this.points, constants.C_WIDTH / 2, this.y)\n  }\n}\n","/**\n * @module constants\n */\n\n/**\n * API url\n * @type {string}\n */\nexports.API_URL = ((window.location.protocol === 'https:') ? 'wss://' : 'ws://') + window.location.host + '/breakout/socket'\n\n/**\n * Canvas height\n * @type {number}\n */\nexports.C_HEIGHT = 450\n\n/**\n * Canvas width\n * @type {number}\n */\nexports.C_WIDTH = 300\n\n/**\n * Is the current client the webview in the android app\n * @type {string}\n */\nexports.IS_ANDROID_APP = navigator.userAgent.indexOf('Smash_It') > 1\n","/**\n * @module gameLoop\n */\n\nconst { Player } = require('./player')\nconst { Ball } = require('./bodies/ball')\nconst { sketch } = require('./sketch')\n\n/**\n * @param {string} str \n */\nconst firstLetterToLowerCase = str => str[0].toLowerCase() + str.slice(1)\n\n/**\n * GameLoop provides the state and drawing for the sketch\n * @class\n * @prop {Paddle[]} paddles\n * @prop {Ball} ball\n */\nclass GameLoop {\n  constructor () {\n    this.reset()\n  }\n\n  reset () {\n    // Initialise bodies\n    this.players = []\n    this.ball = new Ball()\n  }\n\n  updatePlayers (players) {\n    if (this.players.length === 0){\n       this.players = players.map(function (item, index){\n           return new Player(index === 0, players.length === 2);\n       })\n    }\n    \n    for (let i = 0; i < this.players.length; i++) {\n      this.players[i].update(players[i])\n    }\n  }\n\n  /**\n   * Update the body to match the server state\n   * @method\n   * @param {object[]} bodyObj \n   */\n  updateBodies (bodies) {\n    for (const bodyObj of bodies) {\n      const instanceKey = firstLetterToLowerCase(bodyObj.type)\n      this[instanceKey].update(bodyObj)\n    }\n\n    this.run()\n  }\n\n  /**\n   * Draws the current state onto the provided sketch\n   * @method\n   */\n  run () {\n    // Clear canvas\n    sketch.background(0)\n\n    for (const player of this.players) {\n      player.paddle.draw(sketch)\n      if (player.score){\n        player.score.draw(sketch)\n      }\n    }\n\n    this.ball.draw(sketch)\n  }\n}\n\nexports.gameLoop = new GameLoop()\n","$('.container_singleplayer_gamemode a img').on('click', function () {\n  generate()\n})\n\nfunction generate () {\n  const $selector = $(this)\n  let $resultaatstring = ''\n  let min = $selector.attr('data-min')\n  let max = parseInt($selector.attr('data-max')) + 1\n  for (max; min < max; min++) {\n    $resultaatstring += '<a href=\"#\" class=\"level\" data-level=\"' + min + '\"><span class=\"levelName\">' + min + '</span></a>'\n  }\n  $('.generate_levels_singeplayer').html($resultaatstring)\n}\n","const URL_IP = 'http://www.geoplugin.net/json.gp?jsoncallback=?'\n$.getJSON(URL_IP, function (data) {\n  const nationsCode = JSON.stringify(data.geoplugin_countryCode, null, 2)\n  console.log(nationsCode)\n})\n","/**\n * @module initialize\n */\n\n// const { wsClient } = require('./socket/client')\n// const loadingView = require('./views/loading')\nconst constants = require('./constants')\n\n// require('./sketch')\n\nrequire('./music')\nrequire('./qr_code')\nrequire('./stats')\nrequire('./get_nation_data')\nrequire('./generate_levels')\n\nconst { viewManager } = require('./views/index')\n\nviewManager.go('modes.html')\n\n// window.wsClient = wsClient\n// wsClient.open()\n\n/**\n * - The android app needs 4,5 sec to show the vid.\n * - The body needs to be set to the full height of the browser (vh is not supported in webview)\n * - Fade in the body\n */\nconst timeout = constants.IS_ANDROID_APP ? 4500 : 0\nsetTimeout(function () {\n  $('body').css('height', window.innerHeight)\n  $('#start').addClass('load')\n}, timeout)\n\n/**\n * Prevent all hyperlinks from opening the web page manually and use viewManager\n */\n$('body').on('click', 'a', function (e) {\n  const href = e.currentTarget.getAttribute('href')\n  if (!href || href === '#') {\n    return\n  }\n  e.preventDefault()\n  viewManager.go(href)\n})\n","/**\n * Created by svend on 4/04/2017.\n */\n\n/*********************************************PLAY_MUSIC********************************************/\n\nvar select  = function(){\n    var val = $(this).attr('data-val');\n    playMusic(val);\n};\n\nvar playMusic = function(audioName){\n    var snd = new Audio('music/' + audioName + '.mp3');\n    snd.play();\n};\n\n/*********************************************INIT********************************************/\nvar init = function () {\n    $('.click_me').on('click', select);\n};\n$(document).ready(init());","/** @module player */\n\nconst { Paddle } = require('./bodies/paddle')\nconst { Score } = require('./bodies/score')\n\nexports.Player = class Player {\n  constructor (currentPlayer = false, multiplayer = true) {\n    this.currentPlayer = currentPlayer\n    this.paddle = new Paddle()\n    this.multiplayer = multiplayer\n    if (this.multiplayer){\n        this.score = new Score(currentPlayer)\n    }\n  }\n\n  update ({ paddle, score }) {\n    this.paddle.update(paddle)\n    if (this.multiplayer){\n        this.score.update(score)\n    }\n  }\n}\n","$('#start_QR_scan').on('click', function () {\n  SmashIt.startQRCode()\n})\n","/**\n * @module sketch\n */\n\nconst P5 = require('p5')\nconst constants = require('./constants')\n\nexports.sketch = new P5(function (sketch) {\n  sketch.setup = function () {\n    const canvas = sketch.createCanvas(constants.C_WIDTH, constants.C_HEIGHT)\n    canvas.parent('game_started_view')\n\n    // Don't loop on its own because we draw manualy when the server send and update\n    sketch.noLoop()\n  }\n  sketch.draw = () => {}\n})\n","/**\n * @module socket/client\n */\n\nconst constants = require('../constants')\nconst connectionLossView = require('../views/connection_loss')\nconst initGameView = require('../views/init_game')\nconst { requestActionsMap } = require('../actions/index')\n\n/**\n * Websocket client\n * @class\n * @prop {WebSocket} ws\n * @prop {String} clientId - UUID that the socket server gives to our client with the ConnectionSuccessAction\n */\nclass WsClient {\n  /**\n   * Open connection\n   * @method\n   */\n  open () {\n    if (this.ws !== undefined && this.ws.readyState !== WebSocket.CLOSED) {\n      throw new Error('WebSocket is already opened.')\n    }\n\n    this.clientId = null\n\n    this.ws = new WebSocket(constants.API_URL)\n\n    this.ws.onopen = this.onOpen\n    this.ws.onclose = this.onClose\n    this.ws.onmessage = this.onMessage\n  }\n\n  /**\n   * Set the clientId\n   * Only done once\n   * @method\n   */\n  setClientId (clientId) {\n    this.cliendId = clientId\n  }\n\n  /**\n   * Event handler for succesfull connection\n   * @method\n   */\n  onOpen () {\n    initGameView.show()\n  }\n\n  /**\n   * Event handler for connection loss\n   * @method\n   */\n  onClose () {\n    connectionLossView.show()\n    throw new Error('WebSocket was closed.')\n  }\n\n  /**\n   * Event handler for receicing messages\n   * @method\n   */\n  onMessage (event) {\n    const action = JSON.parse(event.data)\n\n    const RequestAction = requestActionsMap[action.type]\n    if (RequestAction) {\n      const a = new RequestAction(action)\n      a.handler()\n    }\n  }\n\n  /**\n   * Send an action to the server\n   * @method\n   * @param {RequestAction} action\n   */\n  send (action) {\n    if (!this.ws) {\n      throw new Error(\"Websocket isn't yet open\")\n    }\n\n    // Set action type as the name of the class\n    action.type = action.constructor.name\n\n    const json = JSON.stringify(action)\n    this.ws.send(json)\n  }\n}\n\nexports.wsClient = new WsClient()\n","const nationsCode = [{\n  player_won: {\n    name: 'Jonas',\n    countryCode: 'BE'\n  },\n  player_lost: {\n    name: 'Fritz',\n    countryCode: 'DE'\n  },\n  points: 250,\n  time: 120\n}, {\n  player_won: {\n    name: 'Thomas',\n    countryCode: 'CH'\n  },\n  player_lost: {\n    name: 'Neymar',\n    countryCode: 'PT'\n  },\n  points: 500,\n  time: 50\n}, {\n  player_won: {\n    name: 'Ishan',\n    countryCode: 'CN'\n  },\n  player_lost: {\n    name: 'Max',\n    countryCode: 'NL'\n  },\n  points: 600,\n  time: 30\n}, {\n  player_won: {\n    name: 'Sven',\n    countryCode: 'EU'\n  },\n  player_lost: {\n    name: 'LX',\n    countryCode: 'SG'\n  },\n  points: 600,\n  time: 30\n}]\n// colspan rowspan\nfunction createTableStats () {\n  let $resultaatString = '<table class=\"table\"><thead><tr><th></th><th>Players</th><th>Points</th><th>Time</th></tr></thead>'\n  $resultaatString += '<tbody>'\n\n  $.each(nationsCode, function (index, item) {\n    const wonPlayerCC = (item.player_won.countryCode).toLowerCase()\n    const lostPlayerCC = (item.player_lost.countryCode).toLocaleLowerCase()\n    $resultaatString += createRow(wonPlayerCC, item, item.points)\n    $resultaatString += createRow(lostPlayerCC, item, 0)\n  })\n  $resultaatString += '</tbody></table>'\n  return $resultaatString\n}\n\nfunction createRow (playerCC, item, points) {\n  let tr = '<tr>'\n  let ctd = '</td>'\n  let ctr = '</td></tr>'\n  let $resultaatString = ''\n  $resultaatString += tr + '<td class=\"country\">'\n  $resultaatString += createImgString(playerCC)\n  $resultaatString += ctd + '<td class=\"name\">'\n  if (points === 0) {\n    $resultaatString += item.player_lost.name\n  } else {\n    $resultaatString += item.player_won.name\n  }\n  $resultaatString += ctd + '<td class=\"points\">'\n  $resultaatString += points\n  if (points === 0) {} else {\n    $resultaatString += ctd + '<td class=\"time\">'\n    $resultaatString += calcTime(item.time)\n  }\n  $resultaatString += ctr\n  return $resultaatString\n}\n\nfunction timePadding (time, isBack) {\n  const newtime = time.toString()\n  if (newtime.length < 2) {\n    return isBack ? newtime + '0' : '0' + newtime\n  } else {\n    return newtime\n  }\n}\n\nfunction calcTime (timeInSec) {\n  const min = Math.floor(timeInSec / 60)\n  const sec = timeInSec - (min * 60)\n  return timePadding(min) + ':' + timePadding(sec)\n}\n\n$('.stats_multiplayer').html(createTableStats())\n\nfunction createImgString (nation) {\n  return '<img src=\"images/nations/' + nation + '.png\" alt=\"' + nation + '\" title=\"' + nation + '\"/>'\n}\n","/**\n * @module utils\n */\n\n/**\n * Calculate distance between 2 points\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @return {number}\n */\nfunction calcPointsDistance (x1, y1, x2, y2) {\n  let xDist = x2 - x1\n  let yDist = y2 - y1\n\n  // Pythagoras\n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\n}\nexports.calcPointsDistance = calcPointsDistance\n\n/**\n * Check if value is between min and max\n * @param {number} val\n * @param {number} min\n * @param {number} max\n * @return {boolean}\n */\nfunction inRange (val, min, max) {\n  return val >= Math.min(min, max) && val <= Math.max(min, max)\n}\nexports.inRange = inRange\n\n/**\n * Check if there is a collision between ball and brick\n * @param {Ball} ball\n * @param {Brick} brick\n * @return {boolean}\n */\nfunction isBallCollision (ball, brick) {\n  return inRange(ball.x, brick.x - ball.radius, brick.x + brick.width + ball.radius) &&\n    inRange(ball.y, brick.y - ball.radius, brick.y + brick.height + ball.radius)\n}\nexports.isBallCollision = isBallCollision\n\n/**\n * Generate random number between min and max\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nfunction randomInRange (min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.round(Math.random() * (max - min)) + min\n}\nexports.randomInRange = randomInRange\n\n/**\n * Generate either 1 or -1\n * @return {number}\n */\nfunction randomSign () {\n  return Math.round(Math.random()) ? 1 : -1\n}\nexports.randomSign = randomSign\n\n/**\n * Generate random color in RGB\n * @return {number[]}\n */\nfunction randomColor () {\n  return [0, 0, 0].map(() => randomInRange(50, 255))\n}\nexports.randomColor = randomColor\n","/**\n * @module views/connection_loss\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#connection_loss_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","const {\n  CreateMultiplayerRequestAction\n} = require('../actions/create_multiplayer_request')\n\nconst path = 'create.html'\nexports.path = path\n\nexports.CreateMultiplayerScreenView = class CreateMultiplayerScreenView {\n  constructor (viewManager) {\n    this.path = path\n    this.viewManager = viewManager\n\n    this.createGameBtn = 'a.create_a_private_game'\n  }\n\n  createMultiplayerHandler () {\n    window.wsClient.send(new CreateMultiplayerRequestAction())\n  }\n\n  onLoad () {\n    $(this.createGameBtn).on('click', this.multiplayerClickHandler)\n  }\n\n  onUnload () {\n    $(this.createGameBtn).off('click')\n  }\n}\n","const {\n  CreateMultiplayerRequestAction\n} = require('../actions/create_multiplayer_request')\n\nconst path = 'multiplayer.html'\nexports.path = path\n\nexports.MultiplayerScreenView = class MultiplayerScreenView {\n  constructor (viewManager) {\n    this.path = path\n    this.viewManager = viewManager\n\n    this.createGameBtn = 'button.createGame'\n  }\n\n  createMultiplayerHandler () {\n    window.wsClient.send(new CreateMultiplayerRequestAction())\n  }\n\n  onLoad () {\n    $(this.createGameBtn).on('click', this.multiplayerClickHandler)\n  }\n\n  onUnload () {\n    $(this.createGameBtn).off('click')\n  }\n}\n","/**\n * @module views/game_loss\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_loss_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","/**\n * @module views/game_started\n */\n\nconst { showView } = require('../utils')\nconst { MovePaddleStartAction } = require('../actions/move_paddle_start')\nconst { MovePaddleStopAction } = require('../actions/move_paddle_stop')\n\nconst els = {\n  container: $('#game_started_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n  let keyCodePressed\n\n  $(window).on('keydown', function (e) {\n    if (keyCodePressed === e.keyCode) {\n      return\n    }\n    keyCodePressed = e.keyCode\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        window.wsClient.send(new MovePaddleStartAction('left'))\n        break\n      case 'ArrowRight':\n        window.wsClient.send(new MovePaddleStartAction('right'))\n        break\n    }\n  })\n\n  $(window).on('keyup', function (e) {\n    keyCodePressed = undefined\n    window.wsClient.send(new MovePaddleStopAction())\n  })\n}\n\nlet lastDirection\n\nfunction getDirection ({ touches }) {\n  console.log(touches)\n  const xPos = touches[touches.length - 1].pageX\n  return xPos > window.innerWidth / 2 ? 'right' : 'left'\n}\n\nfunction handleTouchStart (e) {\n  e.preventDefault()\n  const direction = getDirection(e)\n  lastDirection = direction\n  window.wsClient.send(new MovePaddleStartAction(direction))\n  return false\n}\n\nfunction handleTouchEnd (e) {\n  window.wsClient.send(new MovePaddleStopAction())\n}\n\nconst listenerOptions = { passive: false }\nels.container[0].addEventListener('touchstart', handleTouchStart, listenerOptions)\nels.container[0].addEventListener('touchend', handleTouchEnd, listenerOptions)\nels.container[0].addEventListener('touchcancel', handleTouchEnd, listenerOptions)\n","/**\n * @module views/game_stopped\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_stopped_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","/**\n * @module views/game_victory\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_victory_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","const modeScreen = require('./mode_screen')\nconst multiplayerScreen = require('./multiplayer_screen')\nconst createMultiplayerScreen = require('./create_multiplayer_screen')\n\nconst viewsMap = {\n  [modeScreen.path]: modeScreen.ModeScreenView,\n  [multiplayerScreen.path]: multiplayerScreen.MultiplayerScreenView,\n  [createMultiplayerScreen.path]: createMultiplayerScreen.CreateMultiplayerScreenView\n}\nexports.viewsMap = viewsMap\n\nclass ViewManager {\n  constructor () {\n    this.viewHistory = []\n  }\n\n  go (path) {\n    const ViewConstructor = viewsMap[path]\n\n    if (!ViewConstructor) {\n      throw new Error(`View \"${path}\" doesn't exist.`)\n    }\n\n    const view = new ViewConstructor(this)\n\n    $.ajax({\n      url: path\n    }).done(html => {\n      const currentView = this.viewHistory[this.viewHistory.length - 1]\n      if (currentView) {\n        currentView.onUnload()\n      }\n      $('.screen').removeClass('currentScreen')\n      $(document.body).append(`<div class=\"screen\">${html}</div>`)\n\n      setTimeout(function () {\n        $('.screen')\n          .last()\n          .addClass('currentScreen')\n        $('.screen:not(.currentScreen)').remove()\n      }, 100)\n\n      view.onLoad()\n\n      this.viewHistory.push(view)\n    })\n  }\n}\n\nexports.viewManager = new ViewManager()\n","/**\n * @module views/init_game\n */\n\nconst { showView } = require('../utils')\nconst { CreateMultiplayerRequestAction } = require('../actions/create_multiplayer_request')\nconst { CreateSingleplayerRequestAction } = require('../actions/create_singleplayer_request')\nconst { JoinGameRequestAction } = require('../actions/join_game_request')\n\nconst els = {\n  container: $('#init_game_view'),\n  createMultiplayerBtn: $('#create_multiplayer_btn'),\n  createSingleplayerBtn: $('#create_singleplayer_btn'),\n  joinGameBtn: $('#join_game_btn'),\n  gameKeyInput: $('#game_key_input')\n}\n\nexports.show = function show () {\n  showView(els.container)\n\n  els.createMultiplayerBtn.on('click', function () {\n    window.wsClient.send(new CreateMultiplayerRequestAction())\n  })\n  \n  els.createSingleplayerBtn.on('click', function () {\n    window.wsClient.send(new CreateSingleplayerRequestAction())\n  })\n\n  els.joinGameBtn.on('click', function () {\n    const key = els.gameKeyInput.val()\n    window.wsClient.send(new JoinGameRequestAction(key))\n  })\n}\n","const path = 'modes.html'\nexports.path = path\n\nexports.ModeScreenView = class ModeScreenView {\n  constructor (viewManager) {\n    this.path = path\n    this.viewManager = viewManager\n  }\n  onLoad () {\n  }\n\n  onUnload () {\n  }\n}\n","const path = 'multiplayer.html'\nexports.path = path\n\nexports.MultiplayerScreenView = class MultiplayerScreenView {\n  constructor (viewManager) {\n    this.path = path\n    this.viewManager = viewManager\n  }\n\n  onLoad () {\n  }\n\n  onUnload () {\n  }\n}\n"]}