{"version":3,"sources":["src/actions/connection_success.js","src/actions/create_multiplayer_request.js","src/actions/create_multiplayer_success.js","src/actions/create_singleplayer_request.js","src/actions/create_singleplayer_success.js","src/actions/game_loss.js","src/actions/game_start.js","src/actions/game_state_update.js","src/actions/game_stop.js","src/actions/game_victory.js","src/actions/index.js","src/actions/join_game_request.js","src/actions/move_paddle_left.js","src/actions/move_paddle_right.js","src/bodies/ball.js","src/bodies/brick.js","src/bodies/index.js","src/bodies/paddle.js","src/bodies/score.js","src/constants.js","src/gameloop.js","src/initialize.js","src/player.js","src/sketch.js","src/socket/client.js","src/utils.js","src/views/connection_loss.js","src/views/created_game.js","src/views/game_loss.js","src/views/game_started.js","src/views/game_stopped.js","src/views/game_victory.js","src/views/init_game.js","src/views/loading.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAnBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArtCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAtFA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjrFA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA","file":"../breakout-backend/web/app.js","sourcesContent":["/**\r\n * @module actions/connection_success.js\r\n */\r\n\r\nexports.ConnectionSuccessAction = class ConnectionSuccessAction {\r\n  constructor ({ clientId }) {\r\n    this.clientId = clientId\r\n  }\r\n\r\n  handler () {\r\n    window.wsClient.setClientId(this.clientId)\r\n  }\r\n}\r\n","/**\r\n * @module actions/create_game_request.js\r\n */\r\n\r\nexports.CreateMultiplayerRequestAction = class CreateMultiplayerRequestAction {}\r\n","/**\r\n * @module actions/create_game_success.js\r\n */\r\n\r\nconst createdGameView = require('../views/created_game')\r\n\r\nexports.CreateMultiplayerSuccessAction = class CreateMultiplayerSuccessAction {\r\n  constructor ({ key }) {\r\n    this.key = key\r\n  }\r\n\r\n  handler () {\r\n    createdGameView.show(this.key)\r\n  }\r\n}\r\n","/**\r\n * @module actions/create_game_request.js\r\n */\r\n\r\nexports.CreateSingleplayerRequestAction = class CreateSingleplayerRequestAction {}\r\n","/**\r\n * @module actions/create_game_success.js\r\n */\r\n\r\nconst createdGameView = require('../views/created_game')\r\n\r\nexports.CreateSingleplayerSuccessAction = class CreateSingleplayerSuccessAction {\r\n  constructor ({ key }) {\r\n    this.key = key\r\n  }\r\n\r\n  handler () {\r\n\r\n  }\r\n}\r\n","/**\r\n * @module actions/game_loss.js\r\n */\r\n\r\nconst gameLossView = require('../views/game_loss')\r\n\r\nexports.GameLossAction = class GameLossAction {\r\n  handler () {\r\n    gameLossView.show()\r\n  }\r\n}\r\n","/**\r\n * @module actions/game_start.js\r\n */\r\n\r\nconst gameStartedView = require('../views/game_started')\r\n\r\nexports.GameStartAction = class GameStartAction {\r\n  handler () {\r\n    gameStartedView.show()\r\n  }\r\n}\r\n","/**\r\n * @module actions/game_state_update.js\r\n */\r\n\r\nconst { gameLoop } = require('../gameloop')\r\n\r\nexports.GameStateUpdateAction = class GameStateUpdateAction {\r\n  constructor ({ bodies, players }) {\r\n    this.bodies = bodies\r\n    this.players = players\r\n  }\r\n\r\n  handler () {\r\n    gameLoop.updatePlayers(this.players)\r\n    gameLoop.updateBodies(this.bodies)\r\n  }\r\n}\r\n","/**\r\n * @module actions/game_stop.js\r\n */\r\n\r\nconst gameStoppedView = require('../views/game_stopped')\r\n\r\nexports.GameStopAction = class GameStopAction {\r\n  handler () {\r\n    gameStoppedView.show()\r\n  }\r\n}\r\n","/**\r\n * @module actions/game_victory.js\r\n */\r\n\r\nconst gameVictoryView = require('../views/game_victory')\r\n\r\nexports.GameVictoryAction = class GameVictoryAction {\r\n  handler () {\r\n    gameVictoryView.show()\r\n  }\r\n}\r\n","const { ConnectionSuccessAction } = require('./connection_success')\r\nconst { CreateSingleplayerSuccessAction } = require('./create_singleplayer_success')\r\nconst { CreateMultiplayerSuccessAction } = require('./create_multiplayer_success')\r\nconst { GameStartAction } = require('./game_start')\r\nconst { GameStopAction } = require('./game_stop')\r\nconst { GameVictoryAction } = require('./game_victory')\r\nconst { GameLossAction } = require('./game_loss')\r\nconst { GameStateUpdateAction } = require('./game_state_update')\r\n\r\nexports.requestActionsMap = {\r\n  ConnectionSuccessAction,\r\n  CreateSingleplayerSuccessAction,\r\n  CreateMultiplayerSuccessAction,\r\n  GameStartAction,\r\n  GameStopAction,\r\n  GameVictoryAction,\r\n  GameLossAction,\r\n  GameStateUpdateAction\r\n}\r\n","/**\r\n * @module actions/join_game_request.js\r\n */\r\n\r\nexports.JoinGameRequestAction = class JoinGameRequestAction {\r\n  /**\r\n   * @param {string} key \r\n   */\r\n  constructor (key) {\r\n    this.key = key\r\n  }\r\n}\r\n","/**\r\n * @module actions/move_paddle_left.js\r\n */\r\n\r\nexports.MovePaddleLeftAction = class MovePaddleLeftAction {}\r\n","/**\r\n * @module actions/move_paddle_right.js\r\n */\r\n\r\nexports.MovePaddleRightAction = class MovePaddleRightAction {}\r\n","/**\r\n * @module bodies/ball\r\n */\r\n\r\n/**\r\n * Represents the ball\r\n * @class\r\n * @prop {number} x - horizontal position\r\n * @prop {number} y - vertical position\r\n * @prop {number} dx - horizontal speed\r\n * @prop {number} dy - vertical speed\r\n */\r\nexports.Ball = class Ball {\r\n  constructor () {\r\n    this.height = 0\r\n    this.width = 0\r\n\r\n    this.x = 0\r\n    this.y = 0\r\n\r\n    this.color = 'white'\r\n  }\r\n\r\n  /**\r\n   * Update body to match the server state\r\n   * @param {object} bodyObj \r\n   */\r\n  update ({ height, width, x, y }) {\r\n    this.height = height\r\n    this.width = width\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Draw the ball on the provides 2D context\r\n   * @method\r\n   * @param {Sketch} s\r\n   */\r\n  draw (s) {\r\n    s.fill(this.color)\r\n    s.rect(this.x, this.y, this.height, this.width, this.width)\r\n  }\r\n}\r\n","/**\r\n * @module bodies/brick\r\n */\r\n\r\nconst constants = require('../constants')\r\nconst utils = require('../utils')\r\n\r\n/**\r\n * Represents a brick\r\n * @class\r\n * @prop {number} x - horizontal position\r\n * @prop {number} height\r\n * @prop {number} width\r\n * @prop {number[]} color\r\n */\r\nexports.Brick = class Brick {\r\n  constructor(x, height, width) {\r\n    this.x = x\r\n    this.y = 0\r\n    this.height = height\r\n    this.width = width\r\n    this.color = utils.randomColor()\r\n  }\r\n\r\n  /**\r\n   * Move the ball to new position\r\n   * @method\r\n   * @param {int} dx\r\n   * @param {int} dy\r\n   */\r\n  move(dx, dy) {\r\n    this.x += dx\r\n    this.y += dy\r\n  }\r\n\r\n  /**\r\n   * Draw the brick on the screen\r\n   * @method\r\n   */\r\n  draw() {\r\n    fill.apply(fill, this.color)\r\n    rect(this.x, this.y, this.width, this.height)\r\n  }\r\n}\r\n\r\n/**\r\n * Represents a row of bricks\r\n * @class\r\n * @param {number} rowIndex - The index of row\r\n * @prop {Brick[]} bricks\r\n */\r\nexports.BrickRow = class BrickRow {\r\n  constructor(rowIndex){\r\n    const count = 8\r\n    const margin = 10\r\n    const height = 30\r\n    const width = (constants.C_WIDTH - count * margin) / count\r\n\r\n    // Create new row\r\n    this.bricks = new Array(count)\r\n      .fill(null)\r\n      .map((_, i) => new Brick((width + margin) * i, height, width))\r\n  }\r\n\r\n  /**\r\n   * Move the bricks in this row down 1 row\r\n   * @method\r\n   */\r\n  moveDown() {\r\n    for (const brick of this.bricks) {\r\n      brick.move(0, height + margin)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if the ball colides with a brick in the row\r\n   * @method\r\n   * @param {Ball} ball\r\n   * @return {Ball}\r\n   */\r\n  isBallCollision(ball) {\r\n    for (const brick of this.bricks) {\r\n      if (utils.isBallCollision(ball, brick)) {\r\n        return brick\r\n      }\r\n    }\r\n    return null\r\n  }\r\n\r\n  /**\r\n   * Removes brick from the row\r\n   * @method\r\n   * @param {Brick} brick\r\n   */\r\n  removeBrick(brick) {\r\n    this.bricks = this.bricks.filter((b) => b !== brick)\r\n  }\r\n\r\n  /**\r\n   * Checks if the row is empty\r\n   * @method\r\n   * @return {bool}\r\n   */\r\n  isEmpty() {\r\n    return this.bricks.length < 1\r\n  }\r\n\r\n  /**\r\n   * Draws the bricks\r\n   * @method\r\n   */\r\n  draw() {\r\n    for (const brick of this.bricks) {\r\n      brick.draw()\r\n    }\r\n  }\r\n}\r\n","const { Ball } = require('./ball')\r\nconst { Paddle } = require('./paddle')\r\nconst { Brick } = require('./brick')\r\n\r\nexports.bodiesMap = {\r\n  Ball,\r\n  Paddle,\r\n  Brick\r\n}\r\n","/**\r\n * @module bodies/paddle\r\n */\r\n\r\n/**\r\n * Represents paddle\r\n * @class\r\n * @prop {number} height\r\n * @prop {number} width\r\n * @prop {number} borderRadius\r\n * @prop {number} x\r\n * @prop {number} y\r\n * @prop {string} color\r\n */\r\nexports.Paddle = class Paddle {\r\n  constructor () {\r\n    this.height = 0\r\n    this.width = 0\r\n    this.borderRadius = 4\r\n\r\n    this.x = 0\r\n    this.y = 0\r\n\r\n    this.color = 'white'\r\n  }\r\n\r\n  /**\r\n   * Update body to match the server state\r\n   * @param {object} bodyObj \r\n   */\r\n  update ({ height, width, x, y }) {\r\n    this.height = height\r\n    this.width = width\r\n    this.x = x\r\n    this.y = y\r\n  }\r\n\r\n  /**\r\n   * Daw the paddle on the screen\r\n   * @method\r\n   * @param {Sketch} s\r\n   */\r\n  draw (s) {\r\n    s.fill(this.color)\r\n    s.rect(this.x, this.y, this.width, this.height, this.borderRadius)\r\n  }\r\n}\r\n","/**\r\n * @module bodies/score\r\n */\r\n\r\nconst constants = require('../constants')\r\n\r\n/**\r\n * Represents the user score\r\n * @class\r\n * @prop {number} score\r\n * @prop {string} color\r\n */\r\nexports.Score = class Score {\r\n  constructor (currentPlayer = false) {\r\n    const gap = constants.C_HEIGHT * 0.20\r\n    this.y = currentPlayer ? constants.C_HEIGHT - gap : gap\r\n    this.points = 0\r\n    this.color = 'white'\r\n  }\r\n\r\n  /**\r\n   * @method\r\n   */\r\n  update ({ points }) {\r\n    this.points = points\r\n  }\r\n\r\n  /**\r\n   * Draws the score on the screen\r\n   * @method\r\n   */\r\n  draw (s) {\r\n    s.fill(this.color)\r\n    s.textFont('Arial', 20)\r\n    s.textAlign(s.CENTER)\r\n    s.text(this.points, constants.C_WIDTH / 2, this.y)\r\n  }\r\n}\r\n","/**\r\n * @module constants\r\n */\r\n\r\n/**\r\n * API url\r\n * @type {string}\r\n */\r\nexports.API_URL = ((window.location.protocol === 'https:') ? 'wss://' : 'ws://') + window.location.host + '/breakout/socket'\r\n\r\n/**\r\n * Canvas height\r\n * @type {number}\r\n */\r\nexports.C_HEIGHT = 450\r\n\r\n/**\r\n * Canvas width\r\n * @type {number}\r\n */\r\nexports.C_WIDTH = 300\r\n","/**\r\n * @module gameLoop\r\n */\r\n\r\nconst { Player } = require('./player')\r\nconst { Ball } = require('./bodies/ball')\r\nconst { sketch } = require('./sketch')\r\nconst { MovePaddleLeftAction } = require('./actions/move_paddle_left')\r\nconst { MovePaddleRightAction } = require('./actions/move_paddle_right')\r\n\r\n/**\r\n * @param {string} str \r\n */\r\nconst firstLetterToLowerCase = str => str[0].toLowerCase() + str.slice(1)\r\n\r\n/**\r\n * GameLoop provides the state and drawing for the sketch\r\n * @class\r\n * @prop {Paddle[]} paddles\r\n * @prop {Ball} ball\r\n */\r\nclass GameLoop {\r\n  constructor () {\r\n    this.reset()\r\n  }\r\n\r\n  reset () {\r\n    // Initialise bodies\r\n    this.players = []\r\n    this.ball = new Ball()\r\n  }\r\n\r\n  updatePlayers (players) {\r\n    if (this.players.length === 0){\r\n       this.players = players.map(function (item, index){\r\n           return new Player(index === 0);\r\n       })\r\n    }\r\n    \r\n    for (let i = 0; i < this.players.length; i++) {\r\n      this.players[i].update(players[i])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the body to match the server state\r\n   * @method\r\n   * @param {object[]} bodyObj \r\n   */\r\n  updateBodies (bodies) {\r\n    for (const bodyObj of bodies) {\r\n      const instanceKey = firstLetterToLowerCase(bodyObj.type)\r\n      this[instanceKey].update(bodyObj)\r\n    }\r\n\r\n    // keyIsPressed left and right arrows does not work in firefox\r\n    // so we need to use keyIsDown\r\n    if (sketch.keyIsDown(sketch.LEFT_ARROW)) {\r\n      window.wsClient.send(new MovePaddleLeftAction())\r\n    }\r\n\r\n    if (sketch.keyIsDown(sketch.RIGHT_ARROW)) {\r\n      window.wsClient.send(new MovePaddleRightAction())\r\n    }\r\n\r\n    this.run()\r\n  }\r\n\r\n  /**\r\n   * Draws the current state onto the provided sketch\r\n   * @method\r\n   */\r\n  run () {\r\n    // Clear canvas\r\n    sketch.background(0)\r\n\r\n    for (const player of this.players) {\r\n      player.paddle.draw(sketch)\r\n      player.score.draw(sketch)\r\n    }\r\n\r\n    this.ball.draw(sketch)\r\n  }\r\n}\r\n\r\nexports.gameLoop = new GameLoop()\r\n","/**\r\n * @module initialize\r\n */\r\n\r\nconst { wsClient } = require('./socket/client')\r\nconst loadingView = require('./views/loading')\r\n\r\nrequire('./sketch')\r\n\r\n$(document).ready(function () {\r\n  loadingView.show()\r\n\r\n  window.wsClient = wsClient\r\n  wsClient.open()\r\n})\r\n","/** @module player */\r\n\r\nconst { Paddle } = require('./bodies/paddle')\r\nconst { Score } = require('./bodies/score')\r\n\r\nexports.Player = class Player {\r\n  constructor (currentPlayer = false) {\r\n    this.currentPlayer = currentPlayer\r\n    this.paddle = new Paddle()\r\n    this.score = new Score(currentPlayer)\r\n  }\r\n\r\n  update ({ paddle, score }) {\r\n    this.paddle.update(paddle)\r\n    this.score.update(score)\r\n  }\r\n}\r\n","/**\r\n * @module sketch\r\n */\r\n\r\nconst P5 = require('p5')\r\nconst constants = require('./constants')\r\n\r\nexports.sketch = new P5(function (sketch) {\r\n  sketch.setup = function () {\r\n    const canvas = sketch.createCanvas(constants.C_WIDTH, constants.C_HEIGHT)\r\n    canvas.parent('game_started_view')\r\n\r\n    // Don't loop on its own because we draw manualy when the server send and update\r\n    sketch.noLoop()\r\n  }\r\n  sketch.draw = () => {}\r\n})\r\n","/**\r\n * @module socket/client\r\n */\r\n\r\nconst constants = require('../constants')\r\nconst connectionLossView = require('../views/connection_loss')\r\nconst initGameView = require('../views/init_game')\r\nconst { requestActionsMap } = require('../actions/index')\r\n\r\n/**\r\n * Websocket client\r\n * @class\r\n * @prop {WebSocket} ws\r\n * @prop {String} clientId - UUID that the socket server gives to our client with the ConnectionSuccessAction\r\n */\r\nclass WsClient {\r\n  /**\r\n   * Open connection\r\n   * @method\r\n   */\r\n  open () {\r\n    if (this.ws !== undefined && this.ws.readyState !== WebSocket.CLOSED) {\r\n      throw new Error('WebSocket is already opened.')\r\n    }\r\n\r\n    this.clientId = null\r\n\r\n    this.ws = new WebSocket(constants.API_URL)\r\n\r\n    this.ws.onopen = this.onOpen\r\n    this.ws.onclose = this.onClose\r\n    this.ws.onmessage = this.onMessage\r\n  }\r\n\r\n  /**\r\n   * Set the clientId\r\n   * Only done once\r\n   * @method\r\n   */\r\n  setClientId (clientId) {\r\n    this.cliendId = clientId\r\n  }\r\n\r\n  /**\r\n   * Event handler for succesfull connection\r\n   * @method\r\n   */\r\n  onOpen () {\r\n    initGameView.show()\r\n  }\r\n\r\n  /**\r\n   * Event handler for connection loss\r\n   * @method\r\n   */\r\n  onClose () {\r\n    connectionLossView.show()\r\n    throw new Error('WebSocket was closed.')\r\n  }\r\n\r\n  /**\r\n   * Event handler for receicing messages\r\n   * @method\r\n   */\r\n  onMessage (event) {\r\n    const action = JSON.parse(event.data)\r\n\r\n    const RequestAction = requestActionsMap[action.type]\r\n    if (RequestAction) {\r\n      const a = new RequestAction(action)\r\n      a.handler()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Send an action to the server\r\n   * @method\r\n   * @param {RequestAction} action\r\n   */\r\n  send (action) {\r\n    if (!this.ws) {\r\n      throw new Error(\"Websocket isn't yet open\")\r\n    }\r\n\r\n    // Set action type as the name of the class\r\n    action.type = action.constructor.name\r\n\r\n    const json = JSON.stringify(action)\r\n    this.ws.send(json)\r\n  }\r\n}\r\n\r\nexports.wsClient = new WsClient()\r\n","/**\r\n * @module utils\r\n */\r\n\r\n/**\r\n * Calculate distance between 2 points\r\n * @param {number} x1\r\n * @param {number} y1\r\n * @param {number} x2\r\n * @param {number} y2\r\n * @return {number}\r\n */\r\nfunction calcPointsDistance (x1, y1, x2, y2) {\r\n  let xDist = x2 - x1\r\n  let yDist = y2 - y1\r\n\r\n  // Pythagoras\r\n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\r\n}\r\nexports.calcPointsDistance = calcPointsDistance\r\n\r\n/**\r\n * Check if value is between min and max\r\n * @param {number} val\r\n * @param {number} min\r\n * @param {number} max\r\n * @return {boolean}\r\n */\r\nfunction inRange (val, min, max) {\r\n  return val >= Math.min(min, max) && val <= Math.max(min, max)\r\n}\r\nexports.inRange = inRange\r\n\r\n/**\r\n * Check if there is a collision between ball and brick\r\n * @param {Ball} ball\r\n * @param {Brick} brick\r\n * @return {boolean}\r\n */\r\nfunction isBallCollision (ball, brick) {\r\n  return inRange(ball.x, brick.x - ball.radius, brick.x + brick.width + ball.radius) &&\r\n    inRange(ball.y, brick.y - ball.radius, brick.y + brick.height + ball.radius)\r\n}\r\nexports.isBallCollision = isBallCollision\r\n\r\n/**\r\n * Generate random number between min and max\r\n * @param {number} min\r\n * @param {number} max\r\n * @return {number}\r\n */\r\nfunction randomInRange (min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.round(Math.random() * (max - min)) + min\r\n}\r\nexports.randomInRange = randomInRange\r\n\r\n/**\r\n * Generate either 1 or -1\r\n * @return {number}\r\n */\r\nfunction randomSign () {\r\n  return Math.round(Math.random()) ? 1 : -1\r\n}\r\nexports.randomSign = randomSign\r\n\r\n/**\r\n * Generate random color in RGB\r\n * @return {number[]}\r\n */\r\nfunction randomColor () {\r\n  return [0, 0, 0].map(() => randomInRange(50, 255))\r\n}\r\nexports.randomColor = randomColor\r\n\r\n/**\r\n * Show the given view and hide the others\r\n * @param {jQuery} el - jQuery container element\r\n */\r\nfunction showView (el) {\r\n  $('.view').addClass('hidden')\r\n  el.removeClass('hidden')\r\n}\r\nexports.showView = showView\r\n","/**\r\n * @module views/connection_loss\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = {\r\n  container: $('#connection_loss_view')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n}\r\n","\r\n/**\r\n * @module views/created_game\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = exports.els = {\r\n  container: $('#created_game_success_view'),\r\n  createdGameKey: $('#created_game_key')\r\n}\r\n\r\n/**\r\n * Show the created game view\r\n * @param {string} key - Game session key\r\n */\r\nexports.show = function show (key) {\r\n  els.createdGameKey.text(key)\r\n  showView(els.container)\r\n}\r\n","/**\r\n * @module views/game_loss\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = {\r\n  container: $('#game_loss_view')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n}\r\n","/**\r\n * @module views/game_started\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = {\r\n  container: $('#game_started_view')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n}\r\n","/**\r\n * @module views/game_stopped\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = {\r\n  container: $('#game_stopped_view')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n}\r\n","/**\r\n * @module views/game_victory\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = {\r\n  container: $('#game_victory_view')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n}\r\n","/**\r\n * @module views/init_game\r\n */\r\n\r\nconst { showView } = require('../utils')\r\nconst { CreateMultiplayerRequestAction } = require('../actions/create_multiplayer_request')\r\nconst { CreateSingleplayerRequestAction } = require('../actions/create_singleplayer_request')\r\nconst { JoinGameRequestAction } = require('../actions/join_game_request')\r\n\r\nconst els = {\r\n  container: $('#init_game_view'),\r\n  createMultiplayerBtn: $('#create_multiplayer_btn'),\r\n  createSingleplayerBtn: $('#create_singleplayer_btn'),\r\n  joinGameBtn: $('#join_game_btn'),\r\n  gameKeyInput: $('#game_key_input')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n\r\n  els.createMultiplayerBtn.on('click', function () {\r\n    window.wsClient.send(new CreateMultiplayerRequestAction())\r\n  })\r\n  \r\n  els.createSingleplayerBtn.on('click', function () {\r\n    window.wsClient.send(new CreateSingleplayerRequestAction())\r\n  })\r\n\r\n  els.joinGameBtn.on('click', function () {\r\n    const key = els.gameKeyInput.val()\r\n    window.wsClient.send(new JoinGameRequestAction(key))\r\n  })\r\n}\r\n","/**\r\n * @module views/loading\r\n */\r\n\r\nconst { showView } = require('../utils')\r\n\r\nconst els = {\r\n  container: $('#loading_view')\r\n}\r\n\r\nexports.show = function show () {\r\n  showView(els.container)\r\n}\r\n"]}