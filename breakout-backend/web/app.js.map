{"version":3,"sources":["src/actions/connection_success.js","src/actions/create_game_request.js","src/actions/create_game_success.js","src/actions/game_loss.js","src/actions/game_start.js","src/actions/game_state_update.js","src/actions/game_stop.js","src/actions/game_victory.js","src/actions/index.js","src/actions/join_game_request.js","src/actions/move_paddle_left.js","src/actions/move_paddle_right.js","src/bodies/ball.js","src/bodies/brick.js","src/bodies/index.js","src/bodies/paddle.js","src/bodies/score.js","src/constants.js","src/gameloop.js","src/initialize.js","src/player.js","src/sketch.js","src/socket/client.js","src/utils.js","src/views/connection_loss.js","src/views/created_game.js","src/views/game_loss.js","src/views/game_started.js","src/views/game_stopped.js","src/views/game_victory.js","src/views/init_game.js","src/views/loading.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAXA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAZA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AALA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5CA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArtCA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhFA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAfA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAjrFA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AApBA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA3BA;AAAA;CCAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAbA;AAAA","file":"../breakout-backend/web/app.js","sourcesContent":["/**\n * @module actions/connection_success.js\n */\n\nexports.ConnectionSuccessAction = class ConnectionSuccessAction {\n  constructor ({ clientId }) {\n    this.clientId = clientId\n  }\n\n  handler () {\n    window.wsClient.setClientId(this.clientId)\n  }\n}\n","/**\n * @module actions/create_game_request.js\n */\n\nexports.CreateGameRequestAction = class CreateGameRequestAction {}\n","/**\n * @module actions/create_game_success.js\n */\n\nconst createdGameView = require('../views/created_game')\n\nexports.CreateGameSuccessAction = class CreateGameSuccessAction {\n  constructor ({ key }) {\n    this.key = key\n  }\n\n  handler () {\n    createdGameView.show(this.key)\n  }\n}\n","/**\n * @module actions/game_loss.js\n */\n\nconst gameLossView = require('../views/game_loss')\n\nexports.GameLossAction = class GameLossAction {\n  handler () {\n    gameLossView.show()\n  }\n}\n","/**\n * @module actions/game_start.js\n */\n\nconst gameStartedView = require('../views/game_started')\n\nexports.GameStartAction = class GameStartAction {\n  handler () {\n    gameStartedView.show()\n  }\n}\n","/**\n * @module actions/game_state_update.js\n */\n\nconst { gameLoop } = require('../gameloop')\n\nexports.GameStateUpdateAction = class GameStateUpdateAction {\n  constructor ({ bodies, players }) {\n    this.bodies = bodies\n    this.players = players\n  }\n\n  handler () {\n    gameLoop.updatePlayers(this.players)\n    gameLoop.updateBodies(this.bodies)\n  }\n}\n","/**\n * @module actions/game_stop.js\n */\n\nconst gameStoppedView = require('../views/game_stopped')\n\nexports.GameStopAction = class GameStopAction {\n  handler () {\n    gameStoppedView.show()\n  }\n}\n","/**\n * @module actions/game_victory.js\n */\n\nconst gameVictoryView = require('../views/game_victory')\n\nexports.GameVictoryAction = class GameVictoryAction {\n  handler () {\n    gameVictoryView.show()\n  }\n}\n","const { ConnectionSuccessAction } = require('./connection_success')\nconst { CreateGameSuccessAction } = require('./create_game_success')\nconst { GameStartAction } = require('./game_start')\nconst { GameStopAction } = require('./game_stop')\nconst { GameVictoryAction } = require('./game_victory')\nconst { GameLossAction } = require('./game_loss')\nconst { GameStateUpdateAction } = require('./game_state_update')\n\nexports.requestActionsMap = {\n  ConnectionSuccessAction,\n  CreateGameSuccessAction,\n  GameStartAction,\n  GameStopAction,\n  GameVictoryAction,\n  GameLossAction,\n  GameStateUpdateAction\n}\n","/**\n * @module actions/join_game_request.js\n */\n\nexports.JoinGameRequestAction = class JoinGameRequestAction {\n  /**\n   * @param {string} key \n   */\n  constructor (key) {\n    this.key = key\n  }\n}\n","/**\n * @module actions/move_paddle_left.js\n */\n\nexports.MovePaddleLeftAction = class MovePaddleLeftAction {}\n","/**\n * @module actions/move_paddle_right.js\n */\n\nexports.MovePaddleRightAction = class MovePaddleRightAction {}\n","/**\n * @module bodies/ball\n */\n\n/**\n * Represents the ball\n * @class\n * @prop {number} x - horizontal position\n * @prop {number} y - vertical position\n * @prop {number} dx - horizontal speed\n * @prop {number} dy - vertical speed\n */\nexports.Ball = class Ball {\n  constructor () {\n    this.height = 0\n    this.width = 0\n\n    this.x = 0\n    this.y = 0\n\n    this.color = 'white'\n  }\n\n  /**\n   * Update body to match the server state\n   * @param {object} bodyObj \n   */\n  update ({ height, width, x, y }) {\n    this.height = height\n    this.width = width\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Draw the ball on the provides 2D context\n   * @method\n   * @param {Sketch} s\n   */\n  draw (s) {\n    s.fill(this.color)\n    s.rect(this.x, this.y, this.height, this.width, this.width)\n  }\n}\n","/**\n * @module bodies/brick\n */\n\nconst constants = require('../constants')\nconst utils = require('../utils')\n\n/**\n * Represents a brick\n * @class\n * @prop {number} x - horizontal position\n * @prop {number} height\n * @prop {number} width\n * @prop {number[]} color\n */\nexports.Brick = class Brick {\n  constructor(x, height, width) {\n    this.x = x\n    this.y = 0\n    this.height = height\n    this.width = width\n    this.color = utils.randomColor()\n  }\n\n  /**\n   * Move the ball to new position\n   * @method\n   * @param {int} dx\n   * @param {int} dy\n   */\n  move(dx, dy) {\n    this.x += dx\n    this.y += dy\n  }\n\n  /**\n   * Draw the brick on the screen\n   * @method\n   */\n  draw() {\n    fill.apply(fill, this.color)\n    rect(this.x, this.y, this.width, this.height)\n  }\n}\n\n/**\n * Represents a row of bricks\n * @class\n * @param {number} rowIndex - The index of row\n * @prop {Brick[]} bricks\n */\nexports.BrickRow = class BrickRow {\n  constructor(rowIndex){\n    const count = 8\n    const margin = 10\n    const height = 30\n    const width = (constants.C_WIDTH - count * margin) / count\n\n    // Create new row\n    this.bricks = new Array(count)\n      .fill(null)\n      .map((_, i) => new Brick((width + margin) * i, height, width))\n  }\n\n  /**\n   * Move the bricks in this row down 1 row\n   * @method\n   */\n  moveDown() {\n    for (const brick of this.bricks) {\n      brick.move(0, height + margin)\n    }\n  }\n\n  /**\n   * Checks if the ball colides with a brick in the row\n   * @method\n   * @param {Ball} ball\n   * @return {Ball}\n   */\n  isBallCollision(ball) {\n    for (const brick of this.bricks) {\n      if (utils.isBallCollision(ball, brick)) {\n        return brick\n      }\n    }\n    return null\n  }\n\n  /**\n   * Removes brick from the row\n   * @method\n   * @param {Brick} brick\n   */\n  removeBrick(brick) {\n    this.bricks = this.bricks.filter((b) => b !== brick)\n  }\n\n  /**\n   * Checks if the row is empty\n   * @method\n   * @return {bool}\n   */\n  isEmpty() {\n    return this.bricks.length < 1\n  }\n\n  /**\n   * Draws the bricks\n   * @method\n   */\n  draw() {\n    for (const brick of this.bricks) {\n      brick.draw()\n    }\n  }\n}\n","const { Ball } = require('./ball')\nconst { Paddle } = require('./paddle')\nconst { Brick } = require('./brick')\n\nexports.bodiesMap = {\n  Ball,\n  Paddle,\n  Brick\n}\n","/**\n * @module bodies/paddle\n */\n\n/**\n * Represents paddle\n * @class\n * @prop {number} height\n * @prop {number} width\n * @prop {number} borderRadius\n * @prop {number} x\n * @prop {number} y\n * @prop {string} color\n */\nexports.Paddle = class Paddle {\n  constructor () {\n    this.height = 0\n    this.width = 0\n    this.borderRadius = 4\n\n    this.x = 0\n    this.y = 0\n\n    this.color = 'white'\n  }\n\n  /**\n   * Update body to match the server state\n   * @param {object} bodyObj \n   */\n  update ({ height, width, x, y }) {\n    this.height = height\n    this.width = width\n    this.x = x\n    this.y = y\n  }\n\n  /**\n   * Daw the paddle on the screen\n   * @method\n   * @param {Sketch} s\n   */\n  draw (s) {\n    s.fill(this.color)\n    s.rect(this.x, this.y, this.width, this.height, this.borderRadius)\n  }\n}\n","/**\n * @module bodies/score\n */\n\nconst constants = require('../constants')\n\n/**\n * Represents the user score\n * @class\n * @prop {number} score\n * @prop {string} color\n */\nexports.Score = class Score {\n  constructor (currentPlayer = false) {\n    const gap = constants.C_HEIGHT * 0.20\n    this.y = currentPlayer ? constants.C_HEIGHT - gap : gap\n    this.points = 0\n    this.color = 'white'\n  }\n\n  /**\n   * @method\n   */\n  update ({ points }) {\n    this.points = points\n  }\n\n  /**\n   * Draws the score on the screen\n   * @method\n   */\n  draw (s) {\n    s.fill(this.color)\n    s.textFont('Arial', 20)\n    s.textAlign(s.CENTER)\n    s.text(this.points, constants.C_WIDTH / 2, this.y)\n  }\n}\n","/**\n * @module constants\n */\n\n/**\n * API url\n * @type {string}\n */\nexports.API_URL = 'ws://localhost:8080/breakout/socket'\n\n/**\n * Canvas height\n * @type {number}\n */\nexports.C_HEIGHT = 450\n\n/**\n * Canvas width\n * @type {number}\n */\nexports.C_WIDTH = 300\n","/**\n * @module gameLoop\n */\n\nconst { Player } = require('./player')\nconst { Ball } = require('./bodies/ball')\nconst { sketch } = require('./sketch')\nconst { MovePaddleLeftAction } = require('./actions/move_paddle_left')\nconst { MovePaddleRightAction } = require('./actions/move_paddle_right')\n\n/**\n * @param {string} str \n */\nconst firstLetterToLowerCase = str => str[0].toLowerCase() + str.slice(1)\n\n/**\n * GameLoop provides the state and drawing for the sketch\n * @class\n * @prop {Paddle[]} paddles\n * @prop {Ball} ball\n */\nclass GameLoop {\n  constructor () {\n    this.reset()\n  }\n\n  reset () {\n    // Initialise bodies\n    this.players = [new Player(true), new Player()]\n    this.ball = new Ball()\n  }\n\n  updatePlayers (players) {\n    for (let i = 0; i < this.players.length; i++) {\n      this.players[i].update(players[i])\n    }\n  }\n\n  /**\n   * Update the body to match the server state\n   * @method\n   * @param {object[]} bodyObj \n   */\n  updateBodies (bodies) {\n    for (const bodyObj of bodies) {\n      const instanceKey = firstLetterToLowerCase(bodyObj.type)\n      this[instanceKey].update(bodyObj)\n    }\n\n    // keyIsPressed left and right arrows does not work in firefox\n    // so we need to use keyIsDown\n    if (sketch.keyIsDown(sketch.LEFT_ARROW)) {\n      window.wsClient.send(new MovePaddleLeftAction())\n    }\n\n    if (sketch.keyIsDown(sketch.RIGHT_ARROW)) {\n      window.wsClient.send(new MovePaddleRightAction())\n    }\n\n    this.run()\n  }\n\n  /**\n   * Draws the current state onto the provided sketch\n   * @method\n   */\n  run () {\n    // Clear canvas\n    sketch.background(0)\n\n    for (const player of this.players) {\n      player.paddle.draw(sketch)\n      player.score.draw(sketch)\n    }\n\n    this.ball.draw(sketch)\n  }\n}\n\nexports.gameLoop = new GameLoop()\n","/**\n * @module initialize\n */\n\nconst { wsClient } = require('./socket/client')\nconst loadingView = require('./views/loading')\n\nrequire('./sketch')\n\n$(document).ready(function () {\n  loadingView.show()\n\n  window.wsClient = wsClient\n  wsClient.open()\n})\n","/** @module player */\n\nconst { Paddle } = require('./bodies/paddle')\nconst { Score } = require('./bodies/score')\n\nexports.Player = class Player {\n  constructor (currentPlayer = false) {\n    this.currentPlayer = currentPlayer\n    this.paddle = new Paddle()\n    this.score = new Score(currentPlayer)\n  }\n\n  update ({ paddle, score }) {\n    this.paddle.update(paddle)\n    this.score.update(score)\n  }\n}\n","/**\n * @module sketch\n */\n\nconst P5 = require('p5')\nconst constants = require('./constants')\n\nexports.sketch = new P5(function (sketch) {\n  sketch.setup = function () {\n    const canvas = sketch.createCanvas(constants.C_WIDTH, constants.C_HEIGHT)\n    canvas.parent('game_started_view')\n\n    // Don't loop on its own because we draw manualy when the server send and update\n    sketch.noLoop()\n  }\n  sketch.draw = () => {}\n})\n","/**\n * @module socket/client\n */\n\nconst constants = require('../constants')\nconst connectionLossView = require('../views/connection_loss')\nconst initGameView = require('../views/init_game')\nconst { requestActionsMap } = require('../actions/index')\n\n/**\n * Websocket client\n * @class\n * @prop {WebSocket} ws\n * @prop {String} clientId - UUID that the socket server gives to our client with the ConnectionSuccessAction\n */\nclass WsClient {\n  /**\n   * Open connection\n   * @method\n   */\n  open () {\n    if (this.ws !== undefined && this.ws.readyState !== WebSocket.CLOSED) {\n      throw new Error('WebSocket is already opened.')\n    }\n\n    this.clientId = null\n\n    this.ws = new WebSocket(constants.API_URL)\n\n    this.ws.onopen = this.onOpen\n    this.ws.onclose = this.onClose\n    this.ws.onmessage = this.onMessage\n  }\n\n  /**\n   * Set the clientId\n   * Only done once\n   * @method\n   */\n  setClientId (clientId) {\n    this.cliendId = clientId\n  }\n\n  /**\n   * Event handler for succesfull connection\n   * @method\n   */\n  onOpen () {\n    initGameView.show()\n  }\n\n  /**\n   * Event handler for connection loss\n   * @method\n   */\n  onClose () {\n    connectionLossView.show()\n    throw new Error('WebSocket was closed.')\n  }\n\n  /**\n   * Event handler for receicing messages\n   * @method\n   */\n  onMessage (event) {\n    const action = JSON.parse(event.data)\n\n    const RequestAction = requestActionsMap[action.type]\n    if (RequestAction) {\n      const a = new RequestAction(action)\n      a.handler()\n    }\n  }\n\n  /**\n   * Send an action to the server\n   * @method\n   * @param {RequestAction} action\n   */\n  send (action) {\n    if (!this.ws) {\n      throw new Error(\"Websocket isn't yet open\")\n    }\n\n    // Set action type as the name of the class\n    action.type = action.constructor.name\n\n    const json = JSON.stringify(action)\n    this.ws.send(json)\n  }\n}\n\nexports.wsClient = new WsClient()\n","/**\n * @module utils\n */\n\n/**\n * Calculate distance between 2 points\n * @param {number} x1\n * @param {number} y1\n * @param {number} x2\n * @param {number} y2\n * @return {number}\n */\nfunction calcPointsDistance (x1, y1, x2, y2) {\n  let xDist = x2 - x1\n  let yDist = y2 - y1\n\n  // Pythagoras\n  return Math.sqrt(Math.pow(xDist, 2) + Math.pow(yDist, 2))\n}\nexports.calcPointsDistance = calcPointsDistance\n\n/**\n * Check if value is between min and max\n * @param {number} val\n * @param {number} min\n * @param {number} max\n * @return {boolean}\n */\nfunction inRange (val, min, max) {\n  return val >= Math.min(min, max) && val <= Math.max(min, max)\n}\nexports.inRange = inRange\n\n/**\n * Check if there is a collision between ball and brick\n * @param {Ball} ball\n * @param {Brick} brick\n * @return {boolean}\n */\nfunction isBallCollision (ball, brick) {\n  return inRange(ball.x, brick.x - ball.radius, brick.x + brick.width + ball.radius) &&\n    inRange(ball.y, brick.y - ball.radius, brick.y + brick.height + ball.radius)\n}\nexports.isBallCollision = isBallCollision\n\n/**\n * Generate random number between min and max\n * @param {number} min\n * @param {number} max\n * @return {number}\n */\nfunction randomInRange (min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.round(Math.random() * (max - min)) + min\n}\nexports.randomInRange = randomInRange\n\n/**\n * Generate either 1 or -1\n * @return {number}\n */\nfunction randomSign () {\n  return Math.round(Math.random()) ? 1 : -1\n}\nexports.randomSign = randomSign\n\n/**\n * Generate random color in RGB\n * @return {number[]}\n */\nfunction randomColor () {\n  return [0, 0, 0].map(() => randomInRange(50, 255))\n}\nexports.randomColor = randomColor\n\n/**\n * Show the given view and hide the others\n * @param {jQuery} el - jQuery container element\n */\nfunction showView (el) {\n  $('.view').addClass('hidden')\n  el.removeClass('hidden')\n}\nexports.showView = showView\n","/**\n * @module views/connection_loss\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#connection_loss_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","\n/**\n * @module views/created_game\n */\n\nconst { showView } = require('../utils')\n\nconst els = exports.els = {\n  container: $('#created_game_success_view'),\n  createdGameKey: $('#created_game_key')\n}\n\n/**\n * Show the created game view\n * @param {string} key - Game session key\n */\nexports.show = function show (key) {\n  els.createdGameKey.text(key)\n  showView(els.container)\n}\n","/**\n * @module views/game_loss\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_loss_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","/**\n * @module views/game_started\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_started_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","/**\n * @module views/game_stopped\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_stopped_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","/**\n * @module views/game_victory\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#game_victory_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n","/**\n * @module views/init_game\n */\n\nconst { showView } = require('../utils')\nconst { CreateGameRequestAction } = require('../actions/create_game_request')\nconst { JoinGameRequestAction } = require('../actions/join_game_request')\n\nconst els = {\n  container: $('#init_game_view'),\n  createGameBtn: $('#create_game_btn'),\n  joinGameBtn: $('#join_game_btn'),\n  gameKeyInput: $('#game_key_input')\n}\n\nexports.show = function show () {\n  showView(els.container)\n\n  els.createGameBtn.on('click', function () {\n    window.wsClient.send(new CreateGameRequestAction())\n  })\n\n  els.joinGameBtn.on('click', function () {\n    const key = els.gameKeyInput.val()\n    window.wsClient.send(new JoinGameRequestAction(key))\n  })\n}\n","/**\n * @module views/loading\n */\n\nconst { showView } = require('../utils')\n\nconst els = {\n  container: $('#loading_view')\n}\n\nexports.show = function show () {\n  showView(els.container)\n}\n"]}